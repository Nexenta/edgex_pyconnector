#!/usr/bin/env python

# s3edge : a command line to access stores that use the s3 protocol 
#        e.g. AWS S3, NexentaEdge S3, Minio S3 etc 

import platform
import getopt
import sys
import pprint
import os
from os.path import expanduser

from edge_access import (edge_config, edge_store_access, edge_obj_access)
from edge_logger import (edge_logger)

EDGE_CONFIG_FILE=1
EDGE_CONFIG_JSON=2

default_config = "/.s3edge-config"
S3EA_LOG="s3edge.log"


def config_usage():
    print("... config")
    print("... config list")
    print("... config  show  <store_name>")
    print("... config  primary <store_name>")
    #print("... config  primary <store_name> set <ACCESS=...> <SECRET=...>")

def config(edge_cfg, command, args):
    if len(args) > 0:
        store_name = args[0]
    else:
        store_name = edge_cfg.getPrimaryService()
    if command == "show":
        pprint.pprint(edge_cfg.get(store_name))
    elif command in ("-h", "--help"):
        config_usage()
    elif command == "primary":
        if len(args) > 0:
            edge_cfg.setPrimaryService(args[0], default_config)
        else:
            print(edge_cfg.getPrimaryService())
    elif command == "list":
        all_cfg = edge_cfg.getcfg()
        for k,v in all_cfg.items():
            if (k == "PRIMARY") or (k == "DEBUG_LEVEL"):
                print(k + " : " + str(v))
            else:
                print(k)
    else:
        print("Unknown command : " + command)

def process_command(command, args, elog):
    cfg_file = expanduser("~") + default_config 
    edge_cfg = edge_config()
    try:
        edge_cfg.load_file(cfg_file)
    except:
        elog.log_error(" Error loading " + cfg_file  + " config file")
        return
    primary_service = edge_cfg.getPrimaryService()
    if (command == "list"):
        edge_store = edge_store_access(edge_cfg)
        if not args:
            recursive = False
            edge_store.list_buckets(recursive)
            return

        if (args[0] == "-r"):
            recursive = True
        else:
            recursive = False
        if args:
            if recursive:
                objname = args[1]
            else:
                objname = args[0]
            objp = objname.split("/")
            bucketName = objp[0]
            objpath = "/".join(objp[1:])
            print(bucketName)
            edge_store.list(bucketName, objpath, recursive)
    elif (command == "exists"):
        edge_obj = edge_obj_access(edge_cfg)
        f = edge_obj.exists_obj(args[0])
        print(args[0] + " : " + str(f))
    elif (command == "info"):
        edge_obj = edge_obj_access(edge_cfg)
        f = edge_obj.info_obj(args[0])
        pprint.pprint(str(f))
    elif (command == "put"):
        edge_obj = edge_obj_access(edge_cfg)
        if (args[0] == "-r"):
            edge_obj.put_obj_recursive(args[1], dname=args[2])
        else:
            edge_obj.put_obj(args[0], fileName=args[1])
    elif (command == "get"):
        edge_obj = edge_obj_access(edge_cfg)
        if (args[0] == "-r"):
            edge_obj.get_obj_recursive(args[1], dname=args[2])
        else:
            edge_obj.get_obj(args[0], recurse, fileName=args[1])
    elif (command == "del"):
        edge_obj = edge_obj_access(edge_cfg)
        if (args[0] == "-r"):
            edge_obj.remove_obj_recursive(args[1])
        else:
            edge_obj.remove_obj(args[0], recurse)
    elif (command == "test"):
        edge_obj = edge_obj_access(edge_cfg)
        if args:
            edge_obj.test_one_obj(args[0])
        else:
            edge_obj.test_one_obj("")
    elif (command == "config"):
        if (not args):
            config(edge_cfg, "show", [])
        else:
            config(edge_cfg, args[0], args[1:])
    else:
        elog.log_error('CommandError', "Unknown command: " + command)

def system_info(debug_level):
    print("python \t\t: " + platform.python_version() + " " + platform.python_implementation() + " " + str(platform.python_build()))
    print("platform \t: " + platform.node() + " " + platform.system() + " " + platform.machine() + " " + platform.release())
    print("uname \t\t: " + platform.uname().version)
    print("debug_level \t: " + str(debug_level))

def usage():
    print(sys.argv[0] + " --help")
    print(sys.argv[0] + " --system")
    print(sys.argv[0] + " [ --debug <level> ] <command> <objname> <arg>")
    print("Commands:")
    print("\t\tconfig")
    print("\t\tlist")
    print("\t\texists")
    print("\t\tput")
    print("\t\tget")
    print("\t\tdel")
    print("\t\ttest")
    print("Examples:")
    print("\t% " + sys.argv[0] + " [ --debug <level> ] list [ -r ]")
    print("\t% " + sys.argv[0] + " [ --debug <level> ] list [ -r ] <bucketname>")
    print("\t% " + sys.argv[0] + " get <bucketname/filename> <filename>")
    print("\t% " + sys.argv[0] + " get [ -r ] <bucketname/dirname> <dirname>")
    print("\t% " + sys.argv[0] + " put <bucketname/filename> <filename>")
    print("\t% " + sys.argv[0] + " put [ -r ] <bucketname/dirname> <dirname>")
    print("\t% " + sys.argv[0] + " del <bucketname/filename>")
    print("\t% " + sys.argv[0] + " del [ -r ] <bucketname/dirname>")
    print("\t% " + sys.argv[0] + " info <bucketname/filename>")
    print("\t% " + sys.argv[0] + " exists <bucketname/filename>")

def main():
    debug_level = 4
    try:
        opts, remainder = getopt.getopt(sys.argv[1:], "hd:s", ["help", "debug", "system"])
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    for o,a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit(2)
        if o in ("-d", "--debug"):
            debug_level = a
        if o in ("-s", "--system"):
            system_info(debug_level)
            sys.exit(0)
    if (len(remainder) < 1):
        usage()
        sys.exit(2)
  
    elog = edge_logger(debug_level, S3EA_LOG) 
    elog.log_info(sys.argv[0] + " started")

    command = remainder[0]
    if len(remainder[1:]) >= 1:
        process_command(command, remainder[1:], elog)
    else:
        process_command(command, None, elog)

    elog.log_info(sys.argv[0] + " ended")

if __name__ == '__main__':
    main()
